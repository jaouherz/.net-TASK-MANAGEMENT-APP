@model TaskManagement.Models.LoginViewModel

<div class="login-container">
    <div class="login-wrapper">
        <div class="login-card animate__animated animate__fadeIn">
            <div class="login-header">
                <h2>Welcome Back</h2>
                <p class="text-muted">Please enter your credentials to login</p>
            </div>

            <form method="post" asp-controller="Account" asp-action="Login" class="needs-validation" novalidate>
                <!-- Email Field -->
                <div class="form-group mb-4">
                    <label for="email" class="form-label">Email Address</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-envelope-fill"></i>
                        </span>
                        <input type="email" id="email" name="Email" class="form-control" value="@Model.Email"
                               placeholder="Enter your email" required />
                    </div>
                    <div class="invalid-feedback">
                        Please provide a valid email.
                    </div>
                </div>

                <!-- Password Field -->
                <div class="form-group mb-4">
                    <label for="password" class="form-label">Password</label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="bi bi-lock-fill"></i>
                        </span>
                        <input type="password" id="password" name="Password" class="form-control"
                               placeholder="Enter your password" required />
                        <button class="btn btn-outline-secondary toggle-password" type="button">
                            <i class="bi bi-eye-fill"></i>
                        </button>
                    </div>
                    <div class="invalid-feedback">
                        Please enter your password.
                    </div>
                </div>

                <!-- Remember Me & Forgot Password -->
                <div class="d-flex justify-content-between mb-4">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="rememberMe">
                        <label class="form-check-label" for="rememberMe">
                            Remember me
                        </label>
                    </div>
                    <a href="#" class="text-decoration-none">Forgot password?</a>
                </div>

                <!-- Error Message -->
                @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                {
                <div class="alert alert-danger mt-2 animate__animated animate__shakeX">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>@Model.ErrorMessage
                </div>
                }

                <!-- Submit Button -->
                <div class="d-grid mb-3">
                    <button type="submit" class="btn btn-primary btn-lg">
                        <i class="bi bi-box-arrow-in-right me-2"></i>Login
                    </button>
                </div>

                <!-- Sign Up Link -->
                <div class="text-center">
                    <p class="text-muted">Don't have an account? <a href="#" class="text-decoration-none">Sign up</a></p>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
    .login-container {
        min-height: 100vh;
        padding: 2rem;
    }

    .login-wrapper {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: calc(100vh - 4rem);
    }

    .login-card {
        border-radius: 12px;
        padding: 2.5rem;
        width: 100%;
        max-width: 450px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        border: none;
    }

    .login-header {
        text-align: center;
        margin-bottom: 2rem;
    }

        .login-header h2 {
            color: #333;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

    .form-group label {
        font-weight: 500;
        margin-bottom: 0.5rem;
        color: #555;
    }

    .input-group-text {
        background-color: #f8f9fa;
        border-right: none;
    }

    .form-control {
        border-left: none;
        padding: 0.75rem 1rem;
    }

        .form-control:focus {
            box-shadow: 0 0 0 0.25rem rgba(102, 126, 234, 0.25);
            border-color: #667eea;
        }

    .btn-primary {
        background-color: #667eea;
        border: none;
        padding: 0.75rem;
        font-weight: 500;
        transition: all 0.3s;
    }

        .btn-primary:hover {
            background-color: #5a6fd1;
            transform: translateY(-2px);
        }

    .toggle-password {
        border-left: none;
    }

    .invalid-feedback {
        display: none;
        font-size: 0.875rem;
    }

    .was-validated .form-control:invalid ~ .invalid-feedback {
        display: block;
    }
</style>

@section Scripts {
    <script>
        // Toggle password visibility
        document.querySelectorAll('.toggle-password').forEach(button => {
            button.addEventListener('click', function () {
                const passwordInput = this.closest('.input-group').querySelector('input');
                const icon = this.querySelector('i');

                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    icon.classList.replace('bi-eye-fill', 'bi-eye-slash-fill');
                } else {
                    passwordInput.type = 'password';
                    icon.classList.replace('bi-eye-slash-fill', 'bi-eye-fill');
                }
            });
        });

        // Form validation
        (function () {
            'use strict'

            const forms = document.querySelectorAll('.needs-validation')

            Array.from(forms).forEach(form => {
                form.addEventListener('submit', event => {
                    if (!form.checkValidity()) {
                        event.preventDefault()
                        event.stopPropagation()
                    }

                    form.classList.add('was-validated')
                }, false)
            })
        })()
    </script>
}